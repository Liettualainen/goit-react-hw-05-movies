{"version":3,"file":"static/js/328.fec437a8.chunk.js","mappings":"iQAGaA,E,OAAWC,EAAAA,GAAH,iG,SC4CrB,EArCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,gHAEQC,EAAAA,EAAAA,IAAaP,EAAS,WAF9B,OAETQ,EAFS,OAGTC,EAAOD,EAASC,KAAKN,KAC3BC,EAAQK,GAJO,gDAMfC,QAAQC,IAAR,MANe,yDAAH,qDAShBL,GACD,GAAE,CAACN,KAGF,SAACF,EAAD,UACGK,EAAKS,OAAS,EACXT,EAAKU,KAAI,YAAsC,IAAnCC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,aAAcC,EAAS,EAATA,GACnC,OACE,2BACE,gBACEC,IAAG,UA1BN,mCA0BM,OAAcF,GACjBG,IAAKJ,EACLK,MAAO,OAET,mCAAWL,OANJE,EASZ,IACD,6BAGT,C,4IC3CKI,EAAW,gCACXC,EAAM,mCAEZ,SAASC,IACP,OAAOC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oBAAyC,CAC9CI,OAAQ,CACNC,QAASJ,IAGd,CAED,SAASK,EAAgBC,GACvB,OAAOJ,EAAAA,EAAAA,IAAA,UAAaH,EAAb,gBAAqC,CAC1CI,OAAQ,CACNC,QAASJ,EACTM,MAAAA,IAGL,CAED,SAASC,EAAgBZ,GACvB,OAAOO,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BJ,GAAM,CACzCQ,OAAQ,CACNC,QAASJ,IAGd,CAED,SAASd,EAAaS,EAAIa,GACxB,OAAON,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BJ,EAA9B,YAAoCa,GAAQ,CACjDL,OAAQ,CACNC,QAASJ,IAGd,C","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","services/moviesDB.jsx"],"sourcesContent":["\nimport styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\nmargin-top: 50px;\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n\n`;","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieInfo } from 'services/moviesDB';\n\nimport { CastList } from './Cast.styled';\n\nconst imgUrl = 'https://image.tmdb.org/t/p/w500';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        const response = await getMovieInfo(movieId, 'credits');\n        const data = response.data.cast;\n        setCast(data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchMovie();\n  }, [movieId]);\n\n  return (\n    <CastList>\n      {cast.length > 0\n        ? cast.map(({ character, profile_path, id }) => {\n            return (\n              <li key={id}>\n                <img\n                  src={`${imgUrl}${profile_path}`}\n                  alt={character}\n                  width={100}\n                />\n                <p>Actor: {character}</p>\n              </li>\n            );\n          })\n        : 'No casts in this movie   '}\n    </CastList>\n  );\n};\n\nexport default Cast;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '3755b5a74791c7c24db924897f5b67df';\n\nfunction getTrendsMovies() {\n  return axios.get(`${BASE_URL}trending/all/day`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n}\n\nfunction getSearchMovies(query) {\n  return axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      api_key: KEY,\n      query,\n    },\n  });\n}\n\nfunction getMovieDetails(id) {\n  return axios.get(`${BASE_URL}movie/${id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n}\n\nfunction getMovieInfo(id, info) {\n  return axios.get(`${BASE_URL}movie/${id}/${info}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n}\n\nexport { getTrendsMovies, getSearchMovies, getMovieDetails, getMovieInfo };\n"],"names":["CastList","styled","movieId","useParams","useState","cast","setCast","useEffect","fetchMovie","getMovieInfo","response","data","console","log","length","map","character","profile_path","id","src","alt","width","BASE_URL","KEY","getTrendsMovies","axios","params","api_key","getSearchMovies","query","getMovieDetails","info"],"sourceRoot":""}